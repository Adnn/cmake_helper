if (NOT @PACKAGE_NAME@_FIND_COMPONENTS)
    set(@PACKAGE_NAME@_NOT_FOUND_MESSAGE "The '@PACKAGE_NAME@' package requires at least one component")
    set(@PACKAGE_NAME@_FOUND False)
    return()
endif()

include(CMakeFindDependencyMacro)

# Note: Execution of this Config script might be recursive via the find_depency call,
# in cases where components in the same project depend on each other.
# Since all invocations occur in the same "variable scope", the unset(_config_location) would also 
# erase the value in the "calling context", even if unset would occur after the loop completes.
# For this reason, re-set `_config_location` variable at each iteration.
foreach(module ${@PACKAGE_NAME@_FIND_COMPONENTS})
    set (_config_location "${CMAKE_CURRENT_LIST_DIR}")
    # find_dependency should forward the QUIET and REQUIRED arguments
    find_dependency(${module} CONFIG
                    PATHS "${_config_location}" 
                    NO_DEFAULT_PATH)
    unset(_config_location)
    if (NOT ${module}_FOUND)
        if (@PACKAGE_NAME@_FIND_REQUIRED_${module})
            string(CONCAT _@PACKAGE_NAME@_NOTFOUND_MESSAGE
                   "Failed to find @PACKAGE_NAME@ component \"${module}\" "
                   "config file at \"${_config_location}\"\n")
        elseif(NOT @PACKAGE_NAME@_FIND_QUIETLY)
            message(WARNING "Failed to find @PACKAGE_NAME@ component \"${module}\" "
                             "config file at \"${_config_location}\"")
        endif()
    endif()
endforeach()

if (_@PACKAGE_NAME@_NOTFOUND_MESSAGE)
    set(@PACKAGE_NAME@_NOT_FOUND_MESSAGE "${_@PACKAGE_NAME@_NOTFOUND_MESSAGE}")
    set(@PACKAGE_NAME@_FOUND False)
endif()
